{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "description": "Azure ARM Template to deploy a Red Hat OpenShift Installer Provisioned Infrastructure (IPI) cluster."
    },
    // TODO: Upload private key to keyvault within script to avoid making visible in deployment script output
    "parameters": {
        "namePrefix": {
            "type": "string",
            "minLength": 3,
            "maxLength": 10,
            "metadata": {
                "description": "Prefix for resource names. Must start with a letter and be 3 to 10 characters."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[ resourceGroup().location ]",
            "metadata": {
                "description": "Azure region for the deployment"
            }
        },
        "storageAccountName": {
            "type": "string",
            "defaultValue": "[ concat( toLower( parameters('namePrefix') ), substring( uniqueString(resourceGroup().id), 1, 7 ) ) ]",
            "minLength": 3,
            "maxLength": 24,
            "metadata": {
                "description": "Storage account name for the deployment scripts"
            }
        },
        "managedIdName": {
            "type": "string",
            "defaultValue": "[ concat( parameters('namePrefix'), '-id' ) ]",
            "minLength": 3,
            "maxLength": 24,
            "metadata": {
                "description": "Name of the managed identity for the resource group"
            }
        },
        "vaultName": {
            "type": "string",
            "defaultValue": "[ concat( parameters('namePrefix'), '-', substring( uniqueString(resourceGroup().id), 1, 5 ), '-keyvault' ) ]",
            "metadata": {
                "description": "Name of the key vault to store credentials"
            }
        },
        "keyName": {
            "type": "string",
            "defaultValue": "[ concat(parameters('namePrefix'), '-sshkey') ]",
            "metadata": {
                "description": "Name of the secret to create in the key vault"
            }
        },
        "deployPrereqs": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to run the script prerequisites (for debug only)"
            }
        },
        "deployVNet": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to create the virtual network (for debug only)"
            }
        },
        "deployKeyVault": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to create the key vault (for debug only)"
            }
        },
        "deployOCP": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to deploy the OpenShift cluster (for debug only)"
            }
        },
        "clientId": {
            "type": "string",
            "metadata": {
                "description": "Service principal id"
            }
        },
        "clientSecret": {
            "type": "securestring",
            "metadata": {
                "description": "Service principal secret"
            }
        },
        "clientObjectId": {
            "type": "string",
            "metadata": {
                "description": "Object id for the service principal. Use \"az ad sp list --display-name <service_principal_name> --query '[0].id' -o tsv\""
            }
        },
        "baseDomain": {
            "type": "string",
            "metadata": {
                "description": "Base domain suffix for OpenShift cluster."
            }
        },
        "baseDomainRG": {
            "type": "string",
            "metadata": {
                "description": "Resource group that contains the DNS zone for the base domain"
            }
        },
        "masterNodeSize": {
            "type": "string",
            "defaultValue": "Standard_D8s_v3",
            "metadata": {
                "description": "VM size for the master nodes"
            }
        },
        "workerNodeSize": {
            "type": "string",
            "defaultValue": "Standard_D4s_v3",
            "metadata": {
                "description": "VM size for the worker nodes"
            }
        },
        "workerNodeQty": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "Number of worker nodes to deploy"
            }
        },
        "ocpVersion": {
            "type": "string",
            "defaultValue": "4.10",
            "metadata": {
                "description": "Openshift version to install"
            }
        },
        "pullSecret": {
            "type": "securestring",
            "metadata": {
                "description": "Red Hat OpenShift Pull Secret"
            }
        },
        "publicSshKey": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Public SSH Key for the OpenShift nodes"
            }
        },
        "rgRoleGuidOcp": {
            "type": "string",
            "defaultValue": "[newGuid()]",
            "metadata": {
                "description": "forceUpdateTag property, used to force the execution of the script resource when no other properties have changed."
            }
        },
        "rgRoleGuidSsh": {
            "type": "string",
            "defaultValue": "[newGuid()]",
            "metadata": {
                "description": "forceUpdateTag property, used to force the execution of the script resource when no other properties have changed."
            }
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "vnet",
            "metadata": {
                "description": "Name of the virtual network"
            }
        },
        "vnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.0.0/20",
            "metadata": {
                "description": "CIDR for Virtual Network"
            }
        },
        "controlSubnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "CIDR for the control subnet"
            }
        },
        "controlSubnetName": {
            "type": "string",
            "defaultValue": "control-subnet",
            "metadata": {
                "description": "Name of the OpenShift control subnet"
            }
        },
        "workerSubnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.1.0/24",
            "metadata": {
                "description": "CIDR for the worker subnet"
            }
        },
        "workerSubnetName": {
            "type": "string",
            "defaultValue": "worker-subnet",
            "metadata": {
                "description": "Name of the OpenShift worker subnet"
            }
        },
        "branch": {
            "type": "string",
            "defaultValue": "main",
            "metadata": {
                "description": "Github branch for linked deployments."
            }
        }
    },
    "variables": {
        "baseUrl": "[concat('https://raw.githubusercontent.com/ibm-ecosystem-lab/azure-arm-templates/',parameters('branch'),'/')]"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "name": "scriptPrerequisites",
            "condition": "[parameters('deployPrereqs')]",
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "Inner"
                },
                "parameters": {
                    "storageAccountName": {
                        "value": "[parameters('storageAccountName')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "managedIdName": {
                        "value": "[parameters('managedIdName')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "storageAccountName": {
                            "type": "string"
                        },
                        "location": {
                            "type": "string"
                        },
                        "managedIdName": {
                            "type": "string"
                        }
                    },
                    "variables": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                        "roleDefinitionName": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdName')), variables('roleDefinitionId'), resourceGroup().id)]"
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Storage/storageAccounts",
                            "apiVersion": "2023-01-01",
                            "name": "[parameters('storageAccountName')]",
                            "location": "[parameters('location')]",
                            "sku": {
                                "name": "Standard_LRS",
                                "tier": "Standard"
                            },
                            "kind": "StorageV2",
                            "properties": {
                                "accessTier": "Hot"
                            }
                        },
                        {
                            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                            "apiVersion": "2018-11-30",
                            "name": "[parameters('managedIdName')]",
                            "location": "[parameters('location')]"
                        },
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "2022-04-01",
                            "name": "[variables('roleDefinitionName')]",
                            "dependsOn": [
                                "[parameters('managedIdName')]"
                            ],
                            "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionId')]",
                                "principalId": "[reference(parameters('managedIdName'), '2018-11-30').principalId]",
                                "scope": "[resourceGroup().id]",
                                "principalType": "ServicePrincipal"
                            }
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2022-07-01",
            "condition": "[parameters('deployVNet')]",
            "name": "[parameters('vnetName')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnetCIDR')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('controlSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('controlSubnetCIDR')]",
                            "privateLinkServiceNetworkPolicies": "Disabled",
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.ContainerRegistry"
                                },
                                {
                                    "service": "Microsoft.Storage"
                                }
                            ]
                        }
                    },
                    {
                        "name": "[parameters('workerSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('workerSubnetCIDR')]",
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.ContainerRegistry"
                                },
                                {
                                    "service": "Microsoft.Storage"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "name": "createKeyVault",
            "condition": "[parameters('deployKeyVault')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'scriptPrerequisites')]"
            ],
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "Inner"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "managedIdName": {
                        "value": "[parameters('managedIdName')]"
                    },
                    "vaultName": {
                        "value": "[parameters('vaultName')]"
                    },
                    "createManagedIdentity": {
                        "value": false
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "vaultName": {
                            "type": "string",
                            "metadata": {
                                "description": "Name of the Key Vault"
                            }
                        },
                        "location": {
                            "type": "string",
                            "defaultValue": "[resourceGroup().location]",
                            "metadata": {
                                "description": "Location for the Key Vault"
                            }
                        },
                        "vaultSku": {
                            "type": "object",
                            "defaultValue": {
                                "name": "standard",
                                "family": "A"
                            },
                            "metadata": {
                                "description": "SKU for the Key Vault"
                            }
                        },
                        "createManagedIdentity": {
                            "type": "bool",
                            "defaultValue": true,
                            "metadata": {
                                "description": "Flag to determine whether to create a new managed identity"
                            }
                        },
                        "managedIdName": {
                            "type": "string",
                            "metadata": {
                                "description": "Name of the managed identity to create and/or assign access to the Key Vault"
                            }
                        }
                    },
                    "variables": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]"
                    },
                    "resources": [
                        {
                            "type": "Microsoft.KeyVault/vaults",
                            "apiVersion": "2022-11-01",
                            "name": "[parameters('vaultName')]",
                            "location": "[parameters('location')]",
                            "properties":{
                                "enableRbacAuthorization": true,
                                "tenantId": "[tenant().tenantId]",
                                "sku": "[parameters('vaultSku')]"
                            }
                        },
                        {
                            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                            "apiVersion": "2018-11-30",
                            "name": "[parameters('managedIdName')]",
                            "condition": "[parameters('createManagedIdentity')]",
                            "location": "[parameters('location')]"
                        },
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "2020-10-01-preview",
                            "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                            ],
                            "scope": "[concat('Microsoft.KeyVault/vaults/', parameters('vaultName'))]",
                            "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdName')), variables('roleDefinitionId'), resourceGroup().id)]",
                            "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionId')]",
                                "principalId": "[reference(parameters('managedIdName'), '2018-11-30').principalId]",
                                "principalType": "ServicePrincipal"
                                }       
                        }
                    ],
                    "outputs": {}
                    
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "name": "create-ssh-keys",
            "condition": "[ equals( parameters('publicSshKey'), '') ]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'scriptPrerequisites')]",
                "[resourceId('Microsoft.Resources/deployments', 'createKeyVault')]"
            ],
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "Inner"
                },
                "parameters": {
                    "namePrefix": {
                        "value": "[parameters('namePrefix')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "storageAccountName": {
                        "value": "[parameters('storageAccountName')]"
                    },
                    "managedIdName": {
                        "value": "[parameters('managedIdName')]"
                    },
                    "keyName": {
                        "value": "[parameters('keyName')]"
                    },
                    "createManagedId": {
                        "value": false 
                    },
                    "createStorageAccount": {
                        "value": false
                    },
                    "rgRoleGuid": {
                        "value": "[parameters('rgRoleGuidSsh')]"
                    },
                    "vaultName": {
                        "value": "[parameters('vaultName')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "namePrefix": {
                            "type": "string"
                        },
                        "location": {
                            "type": "string"
                        },
                        "storageAccountName": {
                            "type": "string"
                        },
                        "managedIdName": {
                            "type": "string"
                        },
                        "vaultName": {
                            "type": "string"
                        },
                        "keyName": {
                            "type": "string"
                        },
                        "createManagedId": {
                            "type": "bool"
                        },
                        "createStorageAccount": {
                            "type": "bool"
                        },
                        "rgRoleGuid": {
                            "type": "string"
                        }
                    },
                    "variables": {
                        "containerGroupName": "[concat(parameters('namePrefix'), '-create-ssh-cg')]",
                        "azureCliVersion": "2.45.0",
                        "scriptName": "[concat(parameters('namePrefix'),'-create-ssh-script')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                        "roleDefinitionName": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdName')), variables('roleDefinitionId'), resourceGroup().id)]"
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Storage/storageAccounts",
                            "apiVersion": "2023-01-01",
                            "name": "[parameters('storageAccountName')]",
                            "condition": "[parameters('createStorageAccount')]",
                            "location": "[parameters('location')]",
                            "sku": {
                                "name": "Standard_LRS",
                                "tier": "Standard"
                            },
                            "kind": "StorageV2",
                            "properties": {
                                "accessTier": "Hot"
                            }
                        },
                        {
                            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                            "apiVersion": "2018-11-30",
                            "condition": "[parameters('createManagedId')]",
                            "name": "[parameters('managedIdName')]",
                            "location": "[parameters('location')]"
                        },
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "2022-04-01",
                            "name": "[variables('roleDefinitionName')]",
                            "dependsOn": [
                                "[parameters('managedIdName')]"
                            ],
                            "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionId')]",
                                "principalId": "[reference(parameters('managedIdName'), '2018-11-30').principalId]",
                                "scope": "[resourceGroup().id]",
                                "principalType": "ServicePrincipal"
                            }
                        },
                        {
                            "type": "Microsoft.Resources/deploymentScripts",
                            "apiVersion": "2020-10-01",
                            "comments": "Creates a new SSH key",
                            "name": "[variables('scriptName')]",
                            "dependsOn": [
                                "[resourceId('Microsoft.Authorization/roleAssignments', variables('roleDefinitionName'))]",
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                            ],
                            "location": "[parameters('location')]",
                            "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdName'))]": {}
                                }
                            },
                            "kind": "AzureCLI",
                            "properties": {
                                "forceUpdateTag": "[parameters('rgRoleGuid')]",
                                "containerSettings": {
                                    "containerGroupName": "[variables('containerGroupName')]"
                                },
                                "storageAccountSettings": {
                                    "storageAccountName": "[parameters('storageAccountName')]",
                                    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value]"
                                },
                                "azCliVersion": "[variables('azureCliVersion')]",
                                "scriptContent": "/usr/bin/ssh-keygen -t rsa -b 4096 -f ./tempkey -q -N \"\" ; jq -n -c --arg privateKey \"$(cat ./tempkey)\" --arg publicKey \"$(cat ./tempkey.pub)\" '{\"sshKey\": {\"privateKey\": $privateKey, \"publicKey\": $publicKey}}' > $AZ_SCRIPTS_OUTPUT_PATH",
                                "timeout": "PT15M",
                                "cleanupPreference": "OnSuccess",
                                "retentionInterval": "P1D"
                            }
                        },
                        {
                            "type": "Microsoft.KeyVault/vaults/secrets",
                            "name": "[ concat(parameters('vaultName'), '/', parameters('keyName') ) ]",
                            "dependsOn": [
                                "[resourceId('Microsoft.Resources/deploymentScripts', variables('scriptName'))]"
                            ],
                            "apiVersion": "2022-07-01",
                            "properties": {
                                "value": "[ reference( resourceId('Microsoft.Resources/deploymentScripts', variables('scriptName') ) ).outputs.sshKey.privateKey ]"
                            }
                        },
                        {
                            "type": "Microsoft.Compute/sshPublicKeys",
                            "apiVersion": "2022-11-01",
                            "dependsOn": [
                                "[resourceId('Microsoft.Resources/deploymentScripts', variables('scriptName'))]"
                            ],
                            "name": "[ concat(parameters('keyName'), '-public') ]",
                            "location": "[parameters('location')]",
                            "properties": {
                                "publicKey": "[ reference( resourceId('Microsoft.Resources/deploymentScripts', variables('scriptName') ) ).outputs.sshKey.publicKey ]"
                            }
                        }
                    ],
                    "outputs": {
                        "vaultName": {
                            "type": "string",
                            "value": "[ parameters('vaultName') ]"
                        },
                        "keyName": {
                            "type": "string",
                            "value": "[ parameters('keyName') ]"
                        },
                        "privateKey": {
                            "type": "securestring",
                            "value": "[ reference( resourceId('Microsoft.Resources/deploymentScripts', variables('scriptName') ) ).outputs.sshKey.privateKey ]"
                        },
                        "publicKey": {
                            "type": "string",
                            "value": "[ reference( resourceId('Microsoft.Resources/deploymentScripts', variables('scriptName') ) ).outputs.sshKey.publicKey ]"
                        }
                    }
                }
            }

        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "name": "deploy-ocp-ipi",
            "condition": "[parameters('deployOCP')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'scriptPrerequisites')]",
                "[resourceId('Microsoft.Resources/deployments', 'create-ssh-keys')]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "Inner"
                },
                "parameters": {
                    "namePrefix": {
                        "value": "[parameters('namePrefix')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "storageAccountName": {
                        "value": "[parameters('storageAccountName')]"
                    },
                    "managedIdName": {
                        "value": "[parameters('managedIdName')]"
                    },
                    "rgRoleGuid": {
                        "value": "[parameters('rgRoleGuidOcp')]"
                    },
                    "clientId": {
                        "value": "[parameters('clientId')]"
                    },
                    "clientSecret": {
                        "value": "[parameters('clientSecret')]"
                    },
                    "clientObjectId": {
                        "value": "[parameters('clientObjectId')]" 
                    },
                    "baseDomain": {
                        "value": "[parameters('baseDomain')]"
                    },
                    "ocpVersion": {
                        "value": "[parameters('ocpVersion')]"
                    },
                    "baseUrl": {
                        "value": "[variables('baseUrl')]" 
                    },
                    "baseDomainRG": {
                        "value": "[parameters('baseDomainRG')]" 
                    },
                    "pullSecret": {
                        "value": "[parameters('pullSecret')]" 
                    },
                    "publicSshKey": {
                        "value": "[if( not(equals( parameters('publicSshKey'), '' )), parameters('publicSshKey') ,reference( resourceId('Microsoft.Resources/deployments', 'create-ssh-keys') ).outputs['publicKey'].value )]" 
                    },
                    "vnetName": {
                        "value": "[parameters('vnetName')]"
                    },
                    "vnetCIDR": {
                        "value": "[parameters('vnetCIDR')]"
                    },
                    "controlSubnetName": {
                        "value": "[parameters('controlSubnetName')]"
                    },
                    "workerSubnetName": {
                        "value": "[parameters('workerSubnetName')]"
                    },
                    "masterNodeSize": {
                        "value": "[parameters('masterNodeSize')]"
                    },
                    "workerNodeSize": {
                        "value": "[parameters('workerNodeSize')]"
                    },
                    "workerNodeQty": {
                        "value": "[parameters('workerNodeQty')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "namePrefix": {
                            "type": "string"
                        },
                        "rgRoleGuid": {
                            "type": "string"
                        },
                        "location": {
                            "type": "string"
                        },
                        "storageAccountName": {
                            "type": "string"
                        },
                        "nsgName": {
                            "type": "string",
                            "defaultValue": "[ concat( parameters('namePrefix'), '-ocp-nsg' ) ]"
                        },
                        "managedIdName": {
                            "type": "string"
                        },
                        "clientId": {
                            "type": "string"
                        },
                        "clientSecret": {
                            "type": "securestring"
                        },
                        "clientObjectId": {
                            "type": "string"
                        },
                        "baseDomain": {
                            "type": "string"
                        },
                        "ocpVersion": {
                            "type": "string"
                        },
                        "masterNodeSize": {
                            "type": "string"
                        },
                        "workerNodeSize": {
                            "type": "string"
                        },
                        "workerNodeQty": {
                            "type": "int"
                        },
                        "baseDomainRG": {
                            "type": "string"
                        },
                        "pullSecret": {
                            "type": "secureString"
                        },
                        "publicSshKey": {
                            "type": "securestring"
                        },
                        "vnetName": {
                            "type": "string"
                        },
                        "vnetCIDR": {
                            "type": "string"
                        },
                        "controlSubnetName": {
                            "type": "string"
                        },
                        "workerSubnetName": {
                            "type": "string"
                        },
                        "baseUrl": {
                            "type": "string"
                        }
                    },
                    "variables": {
                        "azureCliVersion": "2.45.0",
                        "scriptName": "[ concat(parameters('namePrefix'), '-ocp-deploy-script') ]",
                        "containergroupName": "[ concat( parameters('namePrefix'), '-ocp-deploy-cg') ]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                        "roleDefinitionName": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('clientObjectId')), variables('roleDefinitionId'), resourceGroup().id)]"
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "2022-04-01",
                            "name": "[variables('roleDefinitionName')]",
                            "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionId')]",
                                "principalId": "[parameters('clientObjectId')]"
                            }
                        },
                        {
                            "type": "Microsoft.Network/networkSecurityGroups",
                            "apiVersion": "2022-11-01",
                            "name": "[parameters('nsgName')]",
                            "location": "[parameters('location')]",
                            "properties": {
                                "securityRules": [
                                    {
                                        "name": "AllowAnyHTTPInbound",
                                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('nsgName'), 'AllowAnyHTTPInbound')]",
                                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                        "properties": {
                                            "protocol": "TCP",
                                            "sourcePortRange": "*",
                                            "destinationPortRange": "80",
                                            "sourceAddressPrefix": "*",
                                            "destinationAddressPrefix": "*",
                                            "access": "Allow",
                                            "priority": 100,
                                            "direction": "Inbound",
                                            "sourcePortRanges": [],
                                            "destinationPortRanges": [],
                                            "sourceAddressPrefixes": [],
                                            "destinationAddressPrefixes": []
                                        }
                                    },
                                    {
                                        "name": "AllowAnyHTTPSInbound",
                                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('nsgName'), 'AllowAnyHTTPSInbound')]",
                                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                        "properties": {
                                            "protocol": "TCP",
                                            "sourcePortRange": "*",
                                            "destinationPortRange": "443",
                                            "sourceAddressPrefix": "*",
                                            "destinationAddressPrefix": "*",
                                            "access": "Allow",
                                            "priority": 110,
                                            "direction": "Inbound",
                                            "sourcePortRanges": [],
                                            "destinationPortRanges": [],
                                            "sourceAddressPrefixes": [],
                                            "destinationAddressPrefixes": []
                                        }
                                    },
                                    {
                                        "name": "AllowAnyPort6443Inbound",
                                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('nsgName'), 'AllowAnyPort6443Inbound')]",
                                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                        "properties": {
                                            "protocol": "TCP",
                                            "sourcePortRange": "*",
                                            "destinationPortRange": "6443",
                                            "sourceAddressPrefix": "*",
                                            "destinationAddressPrefix": "*",
                                            "access": "Allow",
                                            "priority": 120,
                                            "direction": "Inbound",
                                            "sourcePortRanges": [],
                                            "destinationPortRanges": [],
                                            "sourceAddressPrefixes": [],
                                            "destinationAddressPrefixes": []
                                        }
                                    },
                                    {
                                        "name": "AllowAnyPort22623Inbound",
                                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('nsgName'), 'AllowAnyPort22623Inbound')]",
                                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                        "properties": {
                                            "protocol": "TCP",
                                            "sourcePortRange": "*",
                                            "destinationPortRange": "22623",
                                            "sourceAddressPrefix": "*",
                                            "destinationAddressPrefix": "*",
                                            "access": "Allow",
                                            "priority": 130,
                                            "direction": "Inbound",
                                            "sourcePortRanges": [],
                                            "destinationPortRanges": [],
                                            "sourceAddressPrefixes": [],
                                            "destinationAddressPrefixes": []
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "type": "Microsoft.Network/virtualNetworks/subnets",
                            "apiVersion": "2022-09-01",
                            "name": "[ concat( parameters('vnetName'), '/', parameters('controlSubnetName') ) ]",
                            "location": "[ parameters('location') ]",
                            "dependsOn": [
                                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
                            ],
                            "properties": {
                                "addressPrefix": "[ reference( resourceId( 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('controlSubnetName') ), '2022-07-01' ).addressPrefix ]",
                                "networkSecurityGroup": {
                                    "id": "[ resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName') ) ]"
                                },
                                "serviceEndpoints": [
                                    {
                                        "service": "Microsoft.ContainerRegistry"
                                    },
                                    {
                                        "service": "Microsoft.Storage"
                                    }
                                ]
                            }
                        },
                        {
                            "type": "Microsoft.Network/virtualNetworks/subnets",
                            "apiVersion": "2022-09-01",
                            "name": "[ concat( parameters('vnetName'), '/', parameters('workerSubnetName') ) ]",
                            "location": "[ parameters('location') ]",
                            "dependsOn": [
                                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
                            ],
                            "properties": {
                                "addressPrefix": "[ reference( resourceId( 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('workerSubnetName') ), '2022-07-01' ).addressPrefix ]",
                                "networkSecurityGroup": {
                                    "id": "[ resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName') ) ]"
                                },
                                "serviceEndpoints": [
                                    {
                                        "service": "Microsoft.ContainerRegistry"
                                    },
                                    {
                                        "service": "Microsoft.Storage"
                                    }
                                ]
                            }
                        },
                        {
                            "type": "Microsoft.Resources/deploymentScripts",
                            "apiVersion": "2020-10-01",
                            "comments": "Deploys OpenShift IPI cluster on an existing Azure VNet",
                            "name": "[ variables('scriptName') ]",
                            "dependsOn": [
                                "[resourceId('Microsoft.Authorization/roleAssignments', variables('roleDefinitionName'))]",
                                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('controlSubnetName'))]",
                                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('workerSubnetName'))]"
                            ],
                            "location": "[parameters('location')]",
                            "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdName'))]": {}
                                }
                            },
                            "kind": "AzureCLI",
                            "properties": {
                                "forceUpdateTag": "[parameters('rgRoleGuid')]",
                                "containerSettings": {
                                    "containerGroupName": "[variables('containerGroupName')]"
                                },
                                "storageAccountSettings": {
                                    "storageAccountName": "[parameters('storageAccountName')]",
                                    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value]"
                                },
                                "azCliVersion": "[variables('azureCliVersion')]",  
                                "environmentVariables": [
                                    {
                                        "name": "CLIENT_ID",
                                        "value": "[parameters('clientId')]"
                                    },
                                    {
                                        "name": "CLIENT_SECRET",
                                        "secureValue": "[parameters('clientSecret')]"
                                    },
                                    {
                                        "name": "BASE_DOMAIN",
                                        "value": "[parameters('baseDomain')]"
                                    },
                                    {
                                        "name": "BASE_DOMAIN_RESOURCE_GROUP",
                                        "value": "[parameters('baseDomainRG')]"
                                    },
                                    {
                                        "name": "PULL_SECRET",
                                        "secureValue": "[parameters('pullSecret')]"
                                    },
                                    {
                                        "name": "PUBLIC_SSH_KEY",
                                        "secureValue": "[parameters('publicSshKey')]"
                                    },
                                    {
                                        "name": "MASTER_NODE_TYPE",
                                        "value": "[parameters('masterNodeSize')]"
                                    },
                                    {
                                        "name": "WORKER_NODE_TYPE",
                                        "value": "[parameters('workerNodeSize')]"
                                    },
                                    {
                                        "name": "WORKER_NODE_QTY",
                                        "value": "[parameters('workerNodeQty')]"
                                    },
                                    {
                                        "name": "VNET_NAME",
                                        "value": "[parameters('vnetName')]"
                                    },
                                    {
                                        "name": "MACHINE_CIDR",
                                        "value": "[parameters('vnetCIDR')]"
                                    },
                                    {
                                        "name": "WORKER_SUBNET_NAME",
                                        "value": "[parameters('workerSubnetName')]"
                                    },
                                    {
                                        "name": "CONTROL_SUBNET_NAME",
                                        "value": "[parameters('controlSubnetName')]"
                                    },
                                    {
                                        "name": "BIN_DIR",
                                        "value": "/usr/bin"
                                    },
                                    {
                                        "name": "VERSION",
                                        "value": "[parameters('ocpVersion')]"
                                    }
                                ],
                                    "primaryScriptUri": "[uri(parameters('baseUrl'),'openshift/ipi/scripts/deploy-ocp.sh')]",
                                    "supportingScriptUris": [
                                        "[uri(parameters('baseUrl'),'openshift/ipi/scripts/common.sh')]"
                                ],
                                "timeout": "PT120M",
                                "cleanupPreference": "OnSuccess",
                                "retentionInterval": "P1D"
                            }
                        }            
                    ],
                    "outputs": {
                        "consoleURL": {
                            "type": "string",
                            "value": "[ reference( resourceId('Microsoft.Resources/deploymentScripts', variables('scriptName') ) ).outputs.clusterDetails.consoleURL ]"
                        },
                        "apiServer": {
                            "type": "string",
                            "value": "[ reference( resourceId('Microsoft.Resources/deploymentScripts', variables('scriptName') ) ).outputs.clusterDetails.apiServer ]"
                        },
                        "adminUser": {
                            "type": "string",
                            "value": "[ reference( resourceId('Microsoft.Resources/deploymentScripts', variables('scriptName') ) ).outputs.clusterDetails.adminUser ]"
                        },
                        "adminPassword": {
                            "type": "securestring",
                            "condition": true,    // TO DO: Add condition on whether key vault is set
                            "value": "[ reference( resourceId('Microsoft.Resources/deploymentScripts', variables('scriptName') ) ).outputs.clusterDetails.adminPassword ]"
                        },
                        "clusterName": {
                            "type": "string",
                            "value": "[ reference( resourceId('Microsoft.Resources/deploymentScripts', variables('scriptName') ) ).outputs.clusterDetails.clusterName ]"
                        },
                        "clusterId": {
                            "type": "string",
                            "value": "[ reference( resourceId('Microsoft.Resources/deploymentScripts', variables('scriptName') ) ).outputs.clusterDetails.clusterId ]"
                        },
                        "infraId": {
                            "type": "string",
                            "value": "[ reference( resourceId('Microsoft.Resources/deploymentScripts', variables('scriptName') ) ).outputs.clusterDetails.infraId ]"
                        }
                    }
                }
            }
        }
    ],
    "outputs": {

    }
}