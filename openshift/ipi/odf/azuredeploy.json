{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "namePrefix": {
            "type": "string",
            "minLength": 3,
            "maxLength": 10,
            "metadata": {
                "description": "Prefix for resource names"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for deployment container"
            }
        },
        "apiServer": {
            "type": "string",
            "metadata": {
                "description": "URL of the OpenShift cluster API"
            }
        },
        "ocpUsername": {
            "type": "string",
            "metadata": {
                "description": "Name of OpenShift cluster administrator user"
            }
        },
        "ocpPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the OpenShift cluster administrator user"
            }
        },
        "storageSize": {
            "type": "string",
            "defaultValue": "2Ti",
            "allowedValues": [
                "0.5Ti",
                "1Ti",
                "2Ti",
                "3Ti"
            ],
            "metadata": {
                "description": "Size of ODF cluster storage on each node (total storage size = 3 x this figure)"
            }
        },
        "existingNodes": {
            "type": "string",
            "allowedValues": [
                "yes",
                "no"
            ],
            "metadata": {
                "description": "Flag to use existing nodes or create new ones for ODF. If existing, nodes need to be large enough."
            }
        },
        "rgRoleGuid": {
            "type": "string",
            "defaultValue": "[newGuid()]",
            "metadata": {
                "description": "forceUpdateTag property, used to force the execution of the script resource when no other properties have changed."
            }
        },
        "createStorageAccount": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to create a new storage account"
            }
        },
        "storageAccountName": {
            "type": "string",
            "defaultValue": "[concat(parameters('namePrefix'), 'script',substring(uniqueString(resourceGroup().id),1,7))]",
            "metadata": {
                "description": "Name for the storage account for the script execution"
            }            
        },
        "createManagedIdentity": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to create a new managed identity for script execution"
            }
        },
        "managedIdName": {
            "type": "string",
            "defaultValue": "[concat(parameters('namePrefix'),'-script-sp')]",
            "metadata": {
                "description": "Name of the managed identity used for deployment scripts"
            }
        },
        "branch": {
            "type": "string",
            "defaultValue": "main",
            "metadata": {
                "description": "GitHub branch for linked deployments."
            }
        }
        
    },
    "variables": {
      "baseUrl": "[uri('https://raw.githubusercontent.com/ibm-ecosystem-lab/azure-arm-templates/',parameters('branch'))]",
      "containerGroupName": "[concat(parameters('namePrefix'), '-odf-cg')]",
      "scriptName": "[concat(parameters('namePrefix'),'-odf-script')]",
      "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "roleDefinitionName": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdName')), variables('roleDefinitionId'), resourceGroup().id)]"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "comments": "Deploys Cloud Pak Integration onto an ARO cluster",
            "name": "[variables('scriptName')]",
            "location": "[parameters('location')]",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdName'))]": {}
                }
            },
            "kind": "AzureCLI",
            "properties": {
                "forceUpdateTag": "[parameters('rgRoleGuid')]",
                "containerSettings": {
                    "containerGroupName": "[variables('containerGroupName')]"
                },
                "storageAccountSettings": {
                    "storageAccountName": "[parameters('storageAccountName')]",
                    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value]"
                },
                "azCliVersion": "2.45.0",  
                "environmentVariables": [
                    {
                        "name": "RESOURCE_GROUP",
                        "value": "[resourceGroup().name]"
                    },
                    {
                        "name": "API_SERVER",
                        "value": "[parameters('apiServer')]"
                    },
                    {
                        "name": "OCP_USERNAME",
                        "value": "[parameters('ocpUsername')]"
                    },
                    {
                        "name": "OCP_PASSWORD",
                        "secureValue": "[parameters('ocpPassword')]"
                    },
                    {
                        "name": "STORAGE_SIZE",
                        "value": "[parameters('storageSize')]"
                    },
                    {
                        "name": "EXISTING_NODES",
                        "value": "[parameters('existingNodes')]"
                    }
                ],
                "primaryScriptUri": "[uri(variables('baseUrl'),concat(parameters('branch'),'/openshift/ipi/scripts/deploy-odf.sh'))]",
                "supportingScriptUris": [
                    "[uri(variables('baseUrl'),concat(parameters('branch'),'/openshift/ipi/scripts/common.sh'))]"
                ],
                "timeout": "PT90M",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            },
            "dependsOn": [
                "[variables('roleDefinitionName')]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2023-01-01",
            "condition": "[parameters('createStorageAccount')]",
            "name": "[parameters('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2018-11-30",
            "name": "[parameters('managedIdName')]",
            "condition": "[parameters('createManagedIdentity')]",
            "location": "[parameters('location')]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[variables('roleDefinitionName')]",
            "condition": "[parameters('createManagedIdentity')]",
            "dependsOn": [
                "[parameters('managedIdName')]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('roleDefinitionId')]",
                "principalId": "[reference(parameters('managedIdName'), '2018-11-30').principalId]",
                "scope": "[resourceGroup().id]",
                "principalType": "ServicePrincipal"
            }
        }
    ]
}